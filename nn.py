import telebot
import sqlite3
from telebot import types
from dotenv import dotenv_values



def executeAll(request):
    connection = sqlite3.connect(config.get('DB_NAME'))
    cursor = connection.cursor()
    cursor.execute(request)
    data = cursor.fetchall()
    connection.close()
    return data

def executeOne(request):
    connection = sqlite3.connect(config.get('DB_NAME'))
    cursor = connection.cursor()
    cursor.execute(request)
    data = cursor.fetchone()
    connection.close()
    return data

config=dotenv_values('.env')
bot=telebot.TeleBot(config.get('TOKEN'))

#–ö–û–ú–ê–ù–î–ê –°–¢–ê–†–¢
@bot.message_handler(commands=['start'])
def starter(message):
    connection = sqlite3.connect(config.get('DB_NAME'))
    cur = connection.cursor()

    uid = message.chat.id
    cur.execute(f"SELECT id FROM users WHERE id = {uid}")
    all = cur.fetchone()

    if all == None:
        us_id = message.chat.id
        balance = 100 
        cur.execute("INSERT INTO users (id, balance) VALUES(?, ?);", (us_id, balance))
        connection.commit()

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton('üõç‚áí –ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ . . .', callback_data='menu')
    button2 = types.InlineKeyboardButton('üìî‚áí –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ . . .', callback_data='history_items')
    button3 = types.InlineKeyboardButton('üí∏‚áí –°–≤—è–∑—å —Å –±–∞–ª–∞–Ω—Å–æ–º . . .', callback_data='balancer')
    markup.row(button1, button2)
    markup.row(button3)
    bot.send_message(message.chat.id, f'<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.chat.first_name}.</b>\n\n<em>–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∞–≥–∞–∑–∏–Ω "–û–≥—É—Ä—á–∏–∫". –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ, –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º.</em>', reply_markup=markup, parse_mode = 'html')  


#–ö–ê–¢–ï–ì–û–†–ò–ò
@bot.callback_query_handler(func=lambda call: call.data == 'menu')
def menuer(call):
    connect = sqlite3.connect(config.get('DB_NAME'))
    cursor = connect.cursor()
    cursor.execute('SELECT * FROM categories')
    d = cursor.fetchall()
    connect.close()
    
    markup = types.InlineKeyboardMarkup()

    for i in d:
        id, type = i
        markup.add(types.InlineKeyboardButton(type, callback_data=f'categories_{id}'))
        markup.add(types.InlineKeyboardButton('–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é', callback_data='back'))
    bot.send_message(call.message.chat.id, f'<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å </b>', reply_markup=markup, parse_mode='html')

#–¢–û–í–ê–†–´
@bot.callback_query_handler(func=lambda call: call.data.startswith('categories_'))
def callback_category(call):
       id_of_category = call.data.split('_')[1]  
       conn = sqlite3.connect(config.get('DB_NAME'))
       curochka = conn.cursor()

       curochka.execute(f'SELECT items.id, items.name FROM items INNER JOIN categories ON items.categories_id = categories.id WHERE categories.id = {id_of_category}')
       d = curochka.fetchall()
       conn.close()

       markup = types.InlineKeyboardMarkup()
       
       for i in d:
           id_of_item, name_of_item = i
           markup.add(types.InlineKeyboardButton(name_of_item, callback_data=f'items_{id_of_item}'))
       markup.add(types.InlineKeyboardButton('–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é', callback_data='back'))
       bot.send_message(call.message.chat.id,'–¢–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å:', reply_markup=markup)


#–í–´–í–û–î –ò–ù–§–û–†–ú–ê–¶–ò–ò
@bot.callback_query_handler(func=lambda call: call.data.startswith('items_'))
def callback_item(call):
    connection = sqlite3.connect(config.get('DB_NAME'))
    curochka = connection.cursor()
    id_of_item = call.data.split('_')[1]   

    curochka.execute(f'SELECT name, price, desc FROM items WHERE id = {id_of_item}')
    data = curochka.fetchone()
    name_of_item, price_of_item, desk_of_item = data
    bot.send_message(call.message.chat.id,f'–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {name_of_item}\n–î–µ–Ω—å–≥–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å: {price_of_item}\n–ï–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ: {desk_of_item}')
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å', callback_data=f'buy_{id_of_item}'))
    markup.add(types.InlineKeyboardButton('–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é', callback_data='back'))
    bot.send_message(call.message.chat.id, '–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', reply_markup=markup)


# –ü–û–ö–£–ü–ö–ê
@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_"))
def callback_buy(call):
    connection = sqlite3.connect(config.get('DB_NAME'))
    curochka = connection.cursor()
    uid = call.from_user.id
    item_id = call.data.split("_")[1]

    curochka.execute('SELECT name, price FROM items WHERE id = ?',(item_id,))
    data_of_item = curochka.fetchone()
    name_of_data, sum_str = data_of_item
    item_sum = int(sum_str)


    curochka.execute('SELECT balance FROM users WHERE id = ?',(uid,))
    users_balance = curochka.fetchone()[0]

    if users_balance >= item_sum:
        new_balance = users_balance - item_sum

        curochka.execute('UPDATE users SET balance = ? WHERE id = ?', (new_balance, uid))

        curochka.execute('INSERT INTO bills (user_id, item_id,date) VALUES(?,?)', (uid, item_id))

        connection.commit()

        bot.send_message(call.message.chat.id, f'–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.\n–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç: {name_of_data} ')
    else:
        bot.send_message(call.message.chat.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.')

        

#–û–ë–†–ê–¢–ù–û –í –ú–ï–ù–Æ–®–ö–£
@bot.callback_query_handler(func=lambda call: call.data == 'back')
def backer(call):
    if call.data == 'back':
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton('üõç‚áí –ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ . . .', callback_data = 'menu')
        button2 = types.InlineKeyboardButton('üìî‚áí –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ . . .', callback_data = 'buy_history')
        button3 = types.InlineKeyboardButton('üí∏‚áí –°–≤—è–∑—å —Å –±–∞–ª–∞–Ω—Å–æ–º . . .', callback_data = 'balancer')
        markup.row(button1, button2)
        markup.row(button3)
        bot.send_message(call.message.chat.id, f'<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {call.message.chat.first_name}.</b>\n\n<em>–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∞–≥–∞–∑–∏–Ω "–û–≥—É—Ä—á–∏–∫". –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ, –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º.</em>', reply_markup=markup, parse_mode = 'html')  

#–¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–°
@bot.callback_query_handler(func=lambda call: call.data == 'balancer')
def balancerr(call):
   if call.data == 'balancer':
        conn = sqlite3.connect(config.get('DB_NAME'))
        cursor = conn.cursor()
        uid = call.from_user.id

        cursor.execute(f'SELECT balance FROM users WHERE id = {uid}')
        itog = cursor.fetchone()

        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='balancer_add')
        button2 = types.InlineKeyboardButton('–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é', callback_data='back')
        markup.row(button1)
        markup.row(button2)

        if itog:
            balance = itog[0]
            bot.send_message(call.message.chat.id, f'<b>–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å</b>: {balance}', reply_markup=markup, parse_mode='html')
        else:
            bot.send_message(call.message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', reply_markup=markup)


#–ï–ì–û –ü–û–ü–û–õ–ù–ï–ù–ò–ï
@bot.callback_query_handler(func=lambda call: call.data == 'balancer_add')
def balancer_add(call):
   if call.data == 'balancer_add':
        connection = sqlite3.connect(config.get('DB_NAME'))
        cursor = connection.cursor()
        uid = call.from_user.id

        cursor.execute(f'SELECT balance FROM users WHERE id = {uid}')
        itog = cursor.fetchone()
        if itog:
            balance = itog[0]
            bot.send_message(call.message.chat.id, f'<b>–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å</b>: {balance}', parse_mode= 'html')
            bot.send_message(call.message.chat.id, '<b>–í–≤–µ–¥–∏ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å:</b>', parse_mode = 'html')
            bot.register_next_step_handler(call.message, new_balancers)
        else:
            bot.send_message(call.message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')

#—Å–∞–º–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
def new_balancers(message):

    try:
        counter = int(message.text)
        uid = message.from_user.id
        connection = sqlite3.connect(config.get('DB_NAME'))

        cursor = connection.cursor()
        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton('–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é', callback_data='back')
        markup.add(button)

        cursor.execute(f'SELECT balance FROM users WHERE id = {uid}')
        itog = cursor.fetchone()
        if itog:
            balance = itog[0]
            if counter > 0 and counter <= 1000:
                nb = balance + counter
                cursor.execute(f'UPDATE users SET balance = {nb} WHERE id = {uid}')
                connection.commit()
                connection.close()
                bot.send_message(message.chat.id, f'<b>–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> {nb}', reply_markup=markup, parse_mode = 'html')
            elif counter < 0:
                bot.send_message(message.chat.id, '<b>–ü–ª–æ—Ö–∞—è –Ω–æ–≤–æ—Å—Ç—å:</b> –≤—ã –¥–æ —É–∂–∞—Å–∞ –≥–ª—É–ø—ã–π —á–µ–ª–æ–≤–µ–∫, –Ω–µ–ª—å–∑—è –≤–≤–æ–¥–∏—Ç—å —Å—É–º–º—É –º–µ–Ω—å—à–µ 0', reply_markup=markup, parse_mode = 'html')
            else:
                bot.send_message(message.chat.id, '<b>–ü–ª–æ—Ö–∞—è –Ω–æ–≤–æ—Å—Ç—å</b>: –≤—ã –±–µ–∑—É–º–Ω–æ –≥–ª—É–ø—ã–π —á–µ–ª–æ–≤–µ–∫, –Ω–µ–ª—å–∑—è –≤–≤–æ–¥–∏—Ç—å —Å—É–º–º—É –±–æ–ª—å—à–µ 1000', reply_markup=markup, parse_mode = 'html')
        else:
            connection.close()
            bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', reply_markup=markup)
    except ValueError:
        bot.send_message(message.chat.id, '<b>–ú–µ–≥–∞ —Å—É–ø–µ—Ä –ø–ª–æ—Ö–∞—è –Ω–æ–≤–æ—Å—Ç—å</b>: –≤—ã –ø—Ä–æ—Å—Ç–æ —Ç—É–ø–æ–π —á–µ–ª–æ–≤–µ–∫, –Ω–µ–ª—å–∑—è –ø–æ–ø–æ–ª–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å –Ω–µ —Ü–∏—Ñ—Ä–∞–º–∏.', parse_mode = 'html')


#–°–ü–ï–¶–ò–ê–õ–¨–ù–û –î–õ–Ø –¢–£–ü–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
@bot.message_handler()
def yesli_user_durak(message):
    bot.send_message(message.chat.id, '–ß–µ —Å–∫–∞–∑–∞–ª? –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞ –º–æ–µ–º —è–∑—ã–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')

bot.polling(none_stop=True)